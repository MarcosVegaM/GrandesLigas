@model GrandesLigas.Models.Jugador

@{
    ViewData["Title"] = "Editar Jugador";
}

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow-lg">
                <div class="card-header bg-primary text-white text-center">
                    <h4><i class="fas fa-user-edit me-2"></i>Editar Jugador</h4>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm("Editar", "Jugador", FormMethod.Post, new { enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(model => model.JugadorId)

                        <div class="row">
                            <!-- Columna Izquierda -->
                            <div class="col-md-6">
                                <!-- Nombre -->
                                <div class="form-group mb-3">
                                    @Html.LabelFor(model => model.Nombre, new { @class = "form-label fw-bold" })
                                    @Html.TextBoxFor(model => model.Nombre,
                                             new
                                             {
                                                 @class = "form-control",
                                                 placeholder = "Nombre completo del jugador",
                                                 required = "required"
                                             })
                                    @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
                                </div>

                                <!-- Posición -->
                                <div class="form-group mb-3">
                                    @Html.LabelFor(model => model.Posicion, new { @class = "form-label fw-bold" })
                                    @Html.DropDownListFor(model => model.Posicion,
                                             new SelectList(new List<string> {
                                "Pitcher", "Catcher", "Primera Base", "Segunda Base",
                                "Tercera Base", "Shortstop", "Left Fielder",
                                "Center Fielder", "Right Fielder", "Designated Hitter"
                                }, Model.Posicion),
                                             "Seleccione una posición",
                                             new { @class = "form-select", required = "required" })
                                    @Html.ValidationMessageFor(model => model.Posicion, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <!-- Columna Derecha -->
                            <div class="col-md-6">
                                <!-- Fecha de Nacimiento -->
                                <div class="form-group mb-3">
                                    @Html.LabelFor(model => model.FechaNacimiento, new { @class = "form-label fw-bold" })
                                    @Html.TextBoxFor(model => model.FechaNacimiento, "{0:yyyy-MM-dd}",
                                             new { @class = "form-control", type = "date" })
                                    @Html.ValidationMessageFor(model => model.FechaNacimiento, "", new { @class = "text-danger" })
                                </div>

                                <!-- Foto -->
                                <div class="form-group mb-3">
                                    @Html.LabelFor(model => model.Foto, new { @class = "form-label fw-bold" })
                                    <div class="input-group">
                                        <input type="file" class="form-control" id="FotoInput" name="FotoFile" accept="image/*" />
                                        @if (Model.Foto != null && Model.Foto.Length > 0)
                                        {
                                            <button type="button" class="btn btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#fotoModal">
                                                <i class="fas fa-eye me-1"></i>Ver Actual
                                            </button>
                                        }
                                    </div>
                                    @Html.HiddenFor(model => model.Foto)
                                    <small class="text-muted">Suba nueva imagen (JPEG/PNG, máx. 5MB)</small>
                                </div>
                            </div>
                        </div>

                        <div class="d-flex justify-content-center mt-4">
                            <button type="submit" class="btn btn-primary me-3">
                                <i class="fas fa-save me-2"></i>Guardar Cambios
                            </button>
                            <a href="@Url.Action("Index", "Jugador")" class="btn btn-outline-secondary">
                                <i class="fas fa-times me-2"></i>Cancelar
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal para ver foto actual -->
@if (Model.Foto != null && Model.Foto.Length > 0)
{
    <div class="modal fade" id="fotoModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Foto Actual del Jugador</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body text-center">
                    <img src="data:image/jpeg;base64,@Convert.ToBase64String(Model.Foto)"
                         class="img-fluid rounded" alt="Foto del jugador">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" onclick="document.getElementById('Foto').value = ''; document.getElementById('FotoInput').value = ''; $('#fotoModal').modal('hide');">
                        <i class="fas fa-trash-alt me-1"></i>Eliminar Foto
                    </button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-1"></i>Cerrar
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            // Validación de imagen
            document.getElementById('FotoInput').addEventListener('change', function(e) {
                const file = e.target.files[0];
                const maxSize = 5 * 1024 * 1024; // 5MB

                if (file) {
                    // Validar tamaño
                    if (file.size > maxSize) {
                        alert('La imagen es demasiado grande (máximo 5MB)');
                        e.target.value = '';
                        return;
                    }

                    // Validar tipo de archivo
                    if (!file.type.match('image.*')) {
                        alert('Por favor seleccione un archivo de imagen (JPEG/PNG)');
                        e.target.value = '';
                        return;
                    }

                    // Convertir a base64
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        const base64String = e.target.result.split(',')[1];
                        document.getElementById('Foto').value = base64String;
                    };
                    reader.readAsDataURL(file);
                }
            });
        });
    </script>
}

<style>
    .card {
        border-radius: 10px;
        overflow: hidden;
    }

    .card-header {
        border-radius: 0 !important;
    }

    .form-control, .form-select {
        border-radius: 5px;
    }

    .btn {
        border-radius: 5px;
    }

    .input-group-text {
        border-radius: 5px 0 0 5px;
    }
</style>